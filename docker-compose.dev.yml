version: '3.9'
services:
  frontend:
    env_file:
      - ./App/frontend/allu-website/.env
    container_name: frontend
    build: ./App/frontend/allu-website
    networks:
      - frontend
    ports:
      - 3000:3000
    volumes:
      - ./App/frontend/allu-website/src:/frontend/src
    platform: linux/x86_64
    working_dir: /frontend
    command: npm run dev
    depends_on:
      api:
        condition: service_healthy
    # Os `healthcheck` devem garantir que a aplicação
    # está operacional, antes de liberar o container
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"]  # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5
  api:
    env_file:
      - ./App/backend/api/.env
    container_name: api
    build: ./App/backend/api
    networks:
      - frontend
      - database
    ports:
      - 3001:3001
    volumes:
      - ./App/backend/api:/backend/api
    platform: linux/x86_64
    working_dir: /backend/api
    command: npm run dev
    depends_on:
      db:
        condition: service_healthy
    environment:
      - APP_PORT=3001
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - DB_USER=root
      - DB_PASS=password
      - DB_HOST=database
      - DB_PORT=3003
      - SECURITY_URL=http://security:3002
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3001"] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s
      retries: 5
  security:
      env_file:
        - ./App/backend/security/.env
      container_name: security
      build: ./App/backend/security
      networks:
        - frontend
        - dbsecurity
      ports:
        - 3002:3002
      volumes:
        - ./App/backend/security:/backend/security
      platform: linux/x86_64
      working_dir: /backend/security
      command: npm run dev
      depends_on:
        dbsecurity:
          condition: service_healthy
      environment:
        - APP_PORT=3002
        - JWT_SECRET=jwt_secret
        # Os dados abaixo se referem ao container `db`
        # Dica: Relembre aqui da comunicação interna entre containers
        - DB_USER=root
        - DB_PASS=password
        - DB_HOST=databasesecurity
        - DB_PORT=3004
      healthcheck:
        test: ["CMD", "lsof", "-t", "-i:3002"] # Caso utilize outra porta interna para o back, altere ela aqui também
        timeout: 10s
        retries: 5
  db:
    image: mysql:5.7
    container_name: database
    networks:
      - database
    platform: linux/x86_64
    ports:
      - 3003:3306
    volumes:
      - ./src:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_DATABASE=alludatabase
      - MYSQL_ROOT_PASSWORD=password
      - TZ=America/Sao_Paulo
    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-time-zone=-03:00', '--skip-character-set-client-handshake']
    restart: 'always'
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"] # Deve aguardar o banco ficar operacional
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE # Deve omitir alertas menores
  dbsecurity:
    image: mysql:5.7
    container_name: databasesecurity
    networks:
      - dbsecurity
    platform: linux/x86_64
    ports:
      - 3004:3306
    volumes:
      - ./src:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_DATABASE=allusecurity
      - MYSQL_ROOT_PASSWORD=password
      - TZ=America/Sao_Paulo
    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-time-zone=-03:00', '--skip-character-set-client-handshake']
    restart: 'always'
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"] # Deve aguardar o banco ficar operacional
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE # Deve omitir alertas menores
networks:
  frontend:
  database:
  api:
  security:
  dbsecurity: